/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __CONFIG_MANAGER_H__
#define __CONFIG_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.zbus.MyGreeter1 */

#define TYPE_ORG_ZBUS_MY_GREETER1 (org_zbus_my_greeter1_get_type ())
#define ORG_ZBUS_MY_GREETER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_ZBUS_MY_GREETER1, OrgZbusMyGreeter1))
#define IS_ORG_ZBUS_MY_GREETER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_ZBUS_MY_GREETER1))
#define ORG_ZBUS_MY_GREETER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_ZBUS_MY_GREETER1, OrgZbusMyGreeter1Iface))

struct _OrgZbusMyGreeter1;
typedef struct _OrgZbusMyGreeter1 OrgZbusMyGreeter1;
typedef struct _OrgZbusMyGreeter1Iface OrgZbusMyGreeter1Iface;

struct _OrgZbusMyGreeter1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_say_hello) (
    OrgZbusMyGreeter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

};

GType org_zbus_my_greeter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_zbus_my_greeter1_interface_info (void);
guint org_zbus_my_greeter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_zbus_my_greeter1_complete_say_hello (
    OrgZbusMyGreeter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *id);



/* D-Bus method calls: */
void org_zbus_my_greeter1_call_say_hello (
    OrgZbusMyGreeter1 *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_zbus_my_greeter1_call_say_hello_finish (
    OrgZbusMyGreeter1 *proxy,
    gchar **out_id,
    GAsyncResult *res,
    GError **error);

gboolean org_zbus_my_greeter1_call_say_hello_sync (
    OrgZbusMyGreeter1 *proxy,
    const gchar *arg_name,
    gchar **out_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_ZBUS_MY_GREETER1_PROXY (org_zbus_my_greeter1_proxy_get_type ())
#define ORG_ZBUS_MY_GREETER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_ZBUS_MY_GREETER1_PROXY, OrgZbusMyGreeter1Proxy))
#define ORG_ZBUS_MY_GREETER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_ZBUS_MY_GREETER1_PROXY, OrgZbusMyGreeter1ProxyClass))
#define ORG_ZBUS_MY_GREETER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_ZBUS_MY_GREETER1_PROXY, OrgZbusMyGreeter1ProxyClass))
#define IS_ORG_ZBUS_MY_GREETER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_ZBUS_MY_GREETER1_PROXY))
#define IS_ORG_ZBUS_MY_GREETER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_ZBUS_MY_GREETER1_PROXY))

typedef struct _OrgZbusMyGreeter1Proxy OrgZbusMyGreeter1Proxy;
typedef struct _OrgZbusMyGreeter1ProxyClass OrgZbusMyGreeter1ProxyClass;
typedef struct _OrgZbusMyGreeter1ProxyPrivate OrgZbusMyGreeter1ProxyPrivate;

struct _OrgZbusMyGreeter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgZbusMyGreeter1ProxyPrivate *priv;
};

struct _OrgZbusMyGreeter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_zbus_my_greeter1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgZbusMyGreeter1Proxy, g_object_unref)
#endif

void org_zbus_my_greeter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgZbusMyGreeter1 *org_zbus_my_greeter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgZbusMyGreeter1 *org_zbus_my_greeter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_zbus_my_greeter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgZbusMyGreeter1 *org_zbus_my_greeter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgZbusMyGreeter1 *org_zbus_my_greeter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_ZBUS_MY_GREETER1_SKELETON (org_zbus_my_greeter1_skeleton_get_type ())
#define ORG_ZBUS_MY_GREETER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_ZBUS_MY_GREETER1_SKELETON, OrgZbusMyGreeter1Skeleton))
#define ORG_ZBUS_MY_GREETER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_ZBUS_MY_GREETER1_SKELETON, OrgZbusMyGreeter1SkeletonClass))
#define ORG_ZBUS_MY_GREETER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_ZBUS_MY_GREETER1_SKELETON, OrgZbusMyGreeter1SkeletonClass))
#define IS_ORG_ZBUS_MY_GREETER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_ZBUS_MY_GREETER1_SKELETON))
#define IS_ORG_ZBUS_MY_GREETER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_ZBUS_MY_GREETER1_SKELETON))

typedef struct _OrgZbusMyGreeter1Skeleton OrgZbusMyGreeter1Skeleton;
typedef struct _OrgZbusMyGreeter1SkeletonClass OrgZbusMyGreeter1SkeletonClass;
typedef struct _OrgZbusMyGreeter1SkeletonPrivate OrgZbusMyGreeter1SkeletonPrivate;

struct _OrgZbusMyGreeter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgZbusMyGreeter1SkeletonPrivate *priv;
};

struct _OrgZbusMyGreeter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_zbus_my_greeter1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgZbusMyGreeter1Skeleton, g_object_unref)
#endif

OrgZbusMyGreeter1 *org_zbus_my_greeter1_skeleton_new (void);


G_END_DECLS

#endif /* __CONFIG_MANAGER_H__ */
